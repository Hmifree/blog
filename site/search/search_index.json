{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u81ea\u6211\u4ecb\u7ecd \u4ecb\u7ecd\u00b6 \u672c\u4eba\u662fSWPU\u7684\u4e00\u540d\u5b66\u751f\uff0c\u76ee\u524d\u5728\u8bfb\u5927\u4e00\uff0c\u5e0c\u671b\u81ea\u5df1\u4ee5\u540e\u53ef\u4ee5\u6210\u4e3a\u4e00\u540d\u5408\u683c\u7684\u7a0b\u5e8f\u5458\u3002 \u5982\u4f55\u5b66\u4e60\u597d\u7f16\u7a0b\uff1a 1.\u5173\u4e8eC\u8bed\u8a00\uff1aC/C++\u5728\u51e0\u5341\u5e74\u90fd\u4e00\u76f4\u4f4d\u4e8e\u524d\u4e09\u540d\uff0c\u6240\u4ee5\u8db3\u4ee5\u8bc1\u660e\u4ed6\u7684\u7ecf\u5178\u6027\u548c\u91cd\u8981\u6027\u3002C\u8bed\u8a00\u672c\u8eab\u662f\u8f83\u4e3a\u57fa\u7840\u7684\u8bed\u8a00\uff0c\u6240\u4ee5\u5f88\u5bf9\u4e8e\u65b0\u751f\u5165\u95e8\u975e\u5e38\u53cb\u597d\uff0c\u53ea\u9700\u8ba4\u771f\u542c\u5b66\u6821\u8001\u5e08\u8bb2\u8bfe+\u8bfe\u540e\u7ec3\u4e60\u5373\u53ef\u3002 2.\u5173\u4e8e\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff1a\u8fd1\u5e74\u6765\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u6210\u4e3a\u4e86\u8fdb\u5165\u5927\u5382\u7684\u7b2c\u4e00\u5173\u7b14\u8bd5\uff0c\u60f3\u8981\u8fdb\u5165\u5927\u5382\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u800c\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\u53c8\u662f\u6709\u4e00\u5b9a\u96be\u5ea6\u7684\uff0c\u6240\u4ee5\u9700\u8981\u6ce8\u91cd\u5b9e\u8df5\uff0c\u591a\u753b\u56fe\uff0c\u591a\u7ec3\u4e60\u3002 3.\u5173\u4e8eLinux\u64cd\u4f5c\u7cfb\u7edf\u548c\u7f51\u7edc\u7f16\u7a0b\uff1a\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\u5728\u9ad8\u6821\u4e00\u822c\u5f88\u5c11\u6559\uff0c\u4f46\u662f\u53c8\u975e\u5e38\u7684\u91cd\u8981\uff0c\u5728\u6821\u62db\u7684\u9898\u76ee\u4e2d\u968f\u5904\u53ef\u89c1\uff0c\u6240\u4ee5\u5b66\u597d\u8fd9\u4e00\u90e8\u5206\u8981\u591a\u4e70\u4e66\u6765\u770b\uff0c\u6ce8\u91cd\u5b9e\u8df5\uff0c\u8fd8\u53ef\u4ee5\u5728MOOC\u4e0a\u5bfb\u627e\u89c6\u9891\u6765\u770b\u3002\u6ce8\u91cd\u7406\u8bba+\u5b9e\u8df5\u3002","title":"Home"},{"location":"C%E8%AF%AD%E8%A8%80/1.%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/","text":"","title":"1.\u521d\u8bc6C\u8bed\u8a00"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/","text":"\u524d\u8a00\uff1a C\u8bed\u8a00\u4e2d\u5bf9\u5b57\u7b26\u548c\u5b57\u7b26\u4e32\u7684\u5904\u7406\u5f88\u662f\u9891\u7e41\uff0c\u4f46\u662fC\u8bed\u8a00\u672c\u8eab\u662f\u6ca1\u6709\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\uff0c\u5b57\u7b26\u4e32\u901a\u5e38\u653e\u5728 \u5e38\u91cf\u5b57\u7b26\u4e32 \u4e2d \u6216\u8005 \u5b57\u7b26\u6570\u7ec4 \u4e2d\u3002 \u5b57\u7b26\u4e32\u5e38\u91cf \u9002\u7528\u4e8e\u90a3\u4e9b\u5bf9\u5b83\u4e0d\u505a\u4fee\u6539\u7684\u5b57\u7b26\u4e32\u51fd\u6570. \u51fd\u6570\u4ecb\u7ecd: 1. strlen \u00b6 size_t strlen ( const char * str ); * \u5b57\u7b26\u4e32\u5df2\u7ecf '\\0' \u4f5c\u4e3a\u7ed3\u675f\u6807\u5fd7\uff0cstrlen\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5728\u5b57\u7b26\u4e32\u4e2d '\\0' \u524d\u9762\u51fa\u73b0\u7684\u5b57\u7b26\u4e2a\u6570\uff08\u4e0d\u5305\u542b '\\0' )\u3002 #include <stdio.h> #inlcude<string.h> int main () { //a b c \\0 d e f \\0 char arr [] = \"abc \\0 def\" ; return 0 ; } * \u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u8981\u4ee5 '\\0' \u7ed3\u675f\u3002 #include <stdio.h> #include <string.h> int main () { char arr [] = { 'a' , 'b' , 'c' }; printf ( \"%d \\n \" , strlen ( arr )); return 0 ; } * \u6ce8\u610f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3asize_t\uff0c\u662f\u65e0\u7b26\u53f7\u7684( \u6613\u9519 ) #include <stdio.h> #include <string.h> int main () { const char * str1 = \"abcdef\" ; const char * str2 = \"bbb\" ; if ( strlen ( str2 ) - strlen ( str1 ) > 0 ) { printf ( \"str2>str1 \\n \" ); } else { printf ( \"srt1>str2 \\n \" ); } return 0 ; } * \u6a21\u62df\u5b9e\u73b0 //1.\u8ba1\u6570\u5668\u65b9\u5f0f int my_strlen ( const char * str ) { int count = 0 ; while ( * str ) { count ++ ; str ++ ; } return count ; } //2.\u9012\u5f52\uff1a\u4e0d\u80fd\u521b\u5efa\u4e34\u65f6\u53d8\u91cf\u8ba1\u6570\u5668 int my_strlen ( const char * str ) { if ( * str == '\\0' ) return 0 ; else return 1 + my_strlen ( str + 1 ); } //3.\u6307\u9488-\u6307\u9488\u7684\u65b9\u5f0f int my_strlen ( char * s ) { char * p = s ; while ( * p != \u2018\\ 0 \u2019 ) p ++ ; return p - s ; } 2. strcpy \u00b6 char * strcpy ( char * destination , const char * source ); \u6e90\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '\\0' \u7ed3\u675f\u3002 \u5c06\u6e90\u5b57\u7b26\u4e32\u4e2d\u7684 '\\0' \u62f7\u8d1d\u5230\u76ee\u6807\u7a7a\u95f4\u3002 #include <stdio.h> #include <string.h> int main () { char arr [ 10 ] = \"xxxxxxxxx\" ; //const char* p = \"abcdef\"; char arr2 [] = { 'l' , 'k' , '\\0' , 't' }; //strcpy(arr, p); strcpy ( arr , arr2 ); printf ( \"%s \\n \" , arr ); return 0 ; } \u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u8db3\u591f\u5927\uff0c\u4ee5\u786e\u4fdd\u80fd\u5b58\u653e\u6e90\u5b57\u7b26\u4e32\u3002 #include <stdio.h> #include <string.h> int main () { char arr [ 3 ] = { 0 }; char arr2 [] = \"abcdef\" ; strcpy ( arr , arr2 ); printf ( \"%s \\n \" , arr ); return 0 ; } \u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u53ef\u53d8\u3002 #include <stdio.h> #include <string.h> //\u9519\u8bef\u7684\u793a\u8303 int main () { char * p = \"hello world\" ; //\u5e38\u91cf\u5b57\u7b26\u4e32 char arr2 [] = \"abcdef\" ; strcpy ( p , arr2 ); printf ( \"%s \\n \" , p ); return 0 ; } \u6a21\u62df\u5b9e\u73b0 #include <stdio.h> #include <assert.h> //\u9519\u8bef\u7684\u793a\u8303 //1.\u53c2\u6570\u987a\u5e8f //2.\u51fd\u6570\u7684\u529f\u80fd\uff0c\u505c\u6b62\u6761\u4ef6 //3.assert //4.const\u4fee\u9970\u6307\u9488 //5.\u51fd\u6570\u8fd4\u56de\u503c //6.\u9898\u76ee\u51fa\u81ea\u300a\u9ad8\u8d28\u91cfC/C++\u7f16\u7a0b\u300b\u4e66\u7c4d\u6700\u540e\u7684\u8bd5\u9898\u90e8\u5206 char * my_strcpy ( char * dest , const char * src ) { char * ret = dest ; assert ( dest != NULL ); assert ( src != NULL ); while (( * dest ++ = * src ++ )) { ; } return ret ; } 3. strcat \u00b6 char * strcat ( char * destination , const char * source ); \u6e90\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '\\0' \u7ed3\u675f\u3002 \u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u6709\u8db3\u591f\u7684\u5927\uff0c\u80fd\u5bb9\u7eb3\u4e0b\u6e90\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002 \u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u53ef\u4fee\u6539\u3002 \u5b57\u7b26\u4e32\u81ea\u5df1\u7ed9\u81ea\u5df1\u8ffd\u52a0\uff0c\u5982\u4f55\uff1f(\u540e\u7eed\u8bb2) #include <stdio.h> #include <assert.h> int main () { char arr1 [ 20 ] = \"lkt\" ; strcat ( arr1 , arr1 ); //char arr1[20] = \"hello \"; //char arr2[] = \"world\"; //printf(\"%s\\n\", strcat(arr1, arr2)); return 0 ; } \u6a21\u62df\u5b9e\u73b0 char * my_strcat ( char * dest , const char * src ) { //1.\u627e\u76ee\u6807\u7a7a\u95f4\u4e2d\u7684\\0 char * cur = dest ; while ( * cur ) { cur ++ ; } //2.\u62f7\u8d1d\u6e90\u5934\u6570\u636e\u5230\\0\u4e4b\u540e\u7684\u7a7a\u95f4 while ( * cur ++ = * src ++ ) { ; } return dest ; } 4. strcmp \u00b6 int strcmp ( const char * str1 , const char * str2 ); \u6807\u51c6\u89c4\u5b9a\uff1a \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5927\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5927\u4e8e0\u7684\u6570\u5b57 \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de0 \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5c0f\u4e8e0\u7684\u6570\u5b57 \u90a3\u4e48\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\uff1f int main () { /*char arr1[] = \"abcdef\"; char arr2[] = \"abq\";*/ //char arr1[] = \"abcd\"; //char arr2[] = \"abc\"; char arr1 [] = \"abc\" ; char arr2 [] = \"abc\" ; //char arr1[] = { 'a', 'b', 'c' }; //char arr2[] = { 'a', 'b', 'c' }; int ret = my_strcmp ( arr1 , arr2 ); if ( ret < 0 ) printf ( \"arr1<arr2 \\n \" ); else if ( ret > 0 ) printf ( \"arr1>arr2 \\n \" ); else printf ( \"arr1==arr2 \\n \" ); printf ( \"%d \\n \" , ret ); return 0 ; } \u6a21\u62df\u5b9e\u73b0 int my_strcmp ( const char * s1 , const char * s2 ) { assert ( s1 && s2 ); while ( * s1 == * s2 ) { if ( * s1 == '\\0' ) { return 0 ; } s1 ++ ; s2 ++ ; } //return *s1 - *s2; if ( * s1 > * s2 ) return 1 ; else return -1 ; } 5. strncpy \u00b6 int strncmp ( const char * str1 , const char * str2 , size_t num ); * \u62f7\u8d1dnum\u4e2a\u5b57\u7b26\u4ece\u6e90\u5b57\u7b26\u4e32\u5230\u76ee\u6807\u7a7a\u95f4 * \u5982\u679c\u6e90\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8enum\uff0c\u5219\u62f7\u8d1d\u5b8c\u6e90\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u5728\u76ee\u6807\u7684\u540e\u8fb9\u8ffd\u52a00\uff0c\u76f4\u5230num\u4e2a\u3002 int main () { char arr1 [ 20 ] = \"abcdefghi\" ; char arr2 [] = \"xxxx\" ; strncpy ( arr1 , arr2 , 8 ); printf ( \"%s \\n \" , arr1 ); return 0 ; } 6. strncat \u00b6 char * strncat ( char * destination , const char * source , size_t num ); #include <stdio.h> #include <assert.h> int main () { char arr1 [ 20 ] = \"abcdef \\0 qqqqqq\" ; char arr2 [] = \"xyz\" ; strncat ( arr1 , arr2 , 2 ); printf ( \"%s \\n \" , arr1 ); return 0 ; } \u81ea\u5df1\u7ed9\u81ea\u5df1\u6dfb\u52a0 #include <stdio.h> #include <assert.h> int main () { char arr1 [ 20 ] = \"abc\" ; strncat ( arr1 , arr1 , 3 ); printf ( \"%s \\n \" , arr1 ); return 0 ; } 7. strncmp \u00b6 #include <stdio.h> #include <assert.h> int main () { int ret = strncmp ( \"abcdef\" , \"abc\" , 4 ); printf ( \"%d \\n \" , ret ); return 0 ; } 8. strstr + KMP \u00b6 \u793a\u4f8b #include <stdio.h> #include <assert.h> int main () { char arr1 [] = \"abcdefabcdef\" ; char arr2 [] = \"cdq\" ; char * p = strstr ( arr1 , arr2 ); if ( p == NULL ) { printf ( \"\u4e0d\u5b58\u5728 \\n \" ); } else { printf ( \"%s \\n \" , p ); } return 0 ; } \u6a21\u62df\u5b9e\u73b0(\u66b4\u529b\u7248\u672c) #include <stdio.h> #include <assert.h> char * my_strstr ( const char * str1 , const char * str2 ) { const char * s1 = str1 ; const char * s2 = str2 ; const char * p = str1 ; if ( * str2 == '\\0' ) { return str1 ; } while ( * p ) { s1 = p ; s2 = str2 ; while ( * s1 != '\\0' && * s2 != '\\0' && ( * s1 == * s2 )) { s1 ++ ; s2 ++ ; } if ( * s2 == '\\0' ) { return ( char * ) p ; //\u627e\u5230\u4e86 } p ++ ; } return NULL ; //\u627e\u4e0d\u5230\u5b50\u4e32 } \u6a21\u62df\u5b9e\u73b0(KMP\u7248\u672c) KMP\u6709\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e3b\u4e32\u548c\u5b50\u4e32 \u4e3b\u4e32\u7684\u6307\u9488\u4e0d\u56de\u5934\uff0c\u6307\u9488\u672a\u4e3ai \u5b50\u4e32\u7684\u6307\u9488\u56de\u5934\uff0c\u4f46\u662f\u4e0d\u662f\u4e00\u5b9a\u56de\u5230\u4e0b\u6807\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e2anext\u7684\u6570\u7ec4,\u6307\u9488\u4e3aj KMP for ( int i = 1 , j = 0 ; i <= m ; ++ i ) { while ( j && s [ i ] != p [ j + 1 ]) j = Next [ j ]; if ( s [ i ] == p [ j + 1 ]) j ++ ; if ( j >= n ) { cout << i - n << \" \" ; } } Next\u6570\u7ec4(\u9012\u63a8) 1.next[1]=0 2.\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4efb\u7136\u76f8\u540c\u7684\u8bdd\uff0c\u76f4\u63a5\u6784\u6210\u4e86\u4e00\u4e2a\u66f4\u957f\u7684\u524d\u540e\u7f00 3.\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\u7684\u8bdd\uff0c\u76f4\u63a5\u53bb\u5de6\u8fb9\u7684\u7f00\u53bb\u5bfb\u627e\u5171\u540c\u7684\u524d\u540e\u7f00 4.\u56de\u5230\u4e4b\u524d\u7684\u6b65\u9aa4 for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j && p [ i ] != p [ j + 1 ]) j = Next [ j ]; if ( p [ i ] == p [ j + 1 ]) j ++ ; Next [ i ] = j ; } \u6c47\u603b\uff1a #include <iostream> using namespace std ; const int N = 1e6 + 5 ; char s [ N ], p [ N ]; //s\u662f\u4e3b\u4e32\uff0cp\u662f\u5b50\u4e32 int Next [ N ]; int main () { int n , m ; cin >> n >> p + 1 >> m >> s + 1 ; //Next for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j && p [ i ] != p [ j + 1 ]) j = Next [ j ]; if ( p [ i ] == p [ j + 1 ]) j ++ ; Next [ i ] = j ; } int flag = false ; //kmp for ( int i = 1 , j = 0 ; i <= m ; ++ i ) { while ( j && s [ i ] != p [ j + 1 ]) j = Next [ j ]; if ( s [ i ] == p [ j + 1 ]) j ++ ; if ( j >= n ) { flag = true ; cout << i - n << \" \" ; j = Next [ j ]; } } if ( ! flag ) { cout << -1 << endl ; } return 0 ; } 9. strtok \u00b6 char * strtok ( char * str, const char * sep ); * sep\u53c2\u6570\u662f\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b9a\u4e49\u4e86\u7528\u4f5c\u5206\u9694\u7b26\u7684\u5b57\u7b26\u96c6\u5408 * \u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u5305\u542b\u4e860\u4e2a\u6216\u8005\u591a\u4e2a\u7531sep\u5b57\u7b26\u4e32\u4e2d\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5206\u9694\u7b26\u5206\u5272\u7684\u6807\u8bb0\u3002 * strtok\u51fd\u6570\u627e\u5230str\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6807\u8bb0\uff0c\u5e76\u5c06\u5176\u7528 \\0 \u7ed3\u5c3e\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u6807\u8bb0\u7684\u6307\u9488\u3002\uff08\u6ce8\uff1astrtok\u51fd\u6570\u4f1a\u6539\u53d8\u88ab\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u5728\u4f7f\u7528strtok\u51fd\u6570\u5207\u5206\u7684\u5b57\u7b26\u4e32\u4e00\u822c\u90fd\u662f\u4e34\u65f6\u62f7\u8d1d\u7684\u5185\u5bb9\u5e76\u4e14\u53ef\u4fee\u6539\u3002\uff09 * strtok\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u4e3a NULL \uff0c\u51fd\u6570\u5c06\u627e\u5230str\u4e2d\u7b2c\u4e00\u4e2a\u6807\u8bb0\uff0cstrtok\u51fd\u6570\u5c06\u4fdd\u5b58\u5b83\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\u3002 * strtok\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a NULL \uff0c\u51fd\u6570\u5c06\u5728\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u88ab\u4fdd\u5b58\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u4e0b\u4e00\u4e2a\u6807\u8bb0\u3002 * \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u66f4\u591a\u7684\u6807\u8bb0\uff0c\u5219\u8fd4\u56de NULL \u6307\u9488\u3002 #include <stdio.h> #include <string.h> int main () { char arr [] = \"liuketing@swpuedu.com\" ; char buf [ 200 ] = { 0 }; strcpy ( buf , arr ); const char * p = \"@.\" ; char * str = NULL ; for ( str = strtok ( buf , p ); str != NULL ; str = strtok ( NULL , p )) { printf ( \"%s \\n \" , str ); } return 0 ; } 10. strerror \u00b6 char * strerror ( int errnum ); #include <stdio.h> #include <string.h> //strerror //\u628a\u9519\u8bef\u7801\u8f6c\u6362\u6210\u9519\u8bef\u4fe1\u606f int main () { //printf(\"%s\\n\", strerror(0)); //printf(\"%s\\n\", strerror(1)); //printf(\"%s\\n\", strerror(2)); //printf(\"%s\\n\", strerror(3)); //printf(\"%s\\n\", strerror(4)); //\u9519\u8bef\u7801\u8bb0\u5f55\u5230\u9519\u8bef\u7801\u7684\u53d8\u91cf\u4e2d //errno - C\u8bed\u8a00\u63d0\u4f9b\u7684\u5168\u5c40\u7684\u9519\u8bef\u53d8\u91cf //#include <errno.h> FILE * pf = fopen ( \"test.txt\" , \"r\" ); if ( pf == NULL ) { //perror(\"\");//\u6253\u5370\u7684\u4f9d\u7136\u662ferrno\u53d8\u91cf\u4e2d\u9519\u8bef\u7801\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f printf ( \"%s \\n \" , strerror ( errno )); return 1 ; } //\u8bfb\u6587\u4ef6 fclose ( pf ); pf = NULL ; return 0 ; } \u5b57\u7b26\u4e32\u5206\u7c7b\u51fd\u6570: \u51fd\u6570 \u5982\u679c\u4ed6\u7684\u53c2\u6570\u7b26\u5408\u4e0b\u5217\u6761\u4ef6\u5c31\u8fd4\u56de\u771f iscntrl \u4efb\u4f55\u63a7\u5236\u5b57\u7b26 isspace \u7a7a\u767d\u5b57\u7b26\uff1a\u7a7a\u683c\u2018 \u2019\uff0c\u6362\u9875\u2018\\f\u2019\uff0c\u6362\u884c'\\n'\uff0c\u56de\u8f66\u2018\\r\u2019\uff0c\u5236\u8868\u7b26'\\t'\u6216\u8005\u5782\u76f4\u5236\u8868\u7b26'\\v' isdigit \u5341\u8fdb\u5236\u6570\u5b57 0~9 isxdigit \u5341\u516d\u8fdb\u5236\u6570\u5b57\uff0c\u5305\u62ec\u6240\u6709\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u5c0f\u5199\u5b57\u6bcda f\uff0c\u5927\u5199\u5b57\u6bcdA F islower \u5c0f\u5199\u5b57\u6bcda~z isupper \u5927\u5199\u5b57\u6bcdA~Z isalpha \u5b57\u6bcda z\u6216A Z isalnum \u5b57\u6bcd\u6216\u8005\u6570\u5b57\uff0ca z,A Z,0~9 ispunct \u6807\u70b9\u7b26\u53f7\uff0c\u4efb\u4f55\u4e0d\u5c5e\u4e8e\u6570\u5b57\u6216\u8005\u5b57\u6bcd\u7684\u56fe\u5f62\u5b57\u7b26\uff08\u53ef\u6253\u5370\uff09 isgraph \u4efb\u4f55\u56fe\u5f62\u5b57\u7b26 isprint \u4efb\u4f55\u53ef\u6253\u5370\u5b57\u7b26\uff0c\u5305\u62ec\u56fe\u5f62\u5b57\u7b26\u548c\u7a7a\u767d\u5b57\u7b26 \u5b57\u7b26\u8f6c\u6362: \u51fd\u6570 \u529f\u80fd toupper \u5c0f\u5199\u8f6c\u5927\u5199 tolower \u5927\u5199\u8f6c\u5c0f\u5199 #include <stdio.h> #include <ctype.h> int main () { char arr [] = \"Are you ok?\" ; char * p = arr ; while ( * p ) { if ( islower ( * p )) { * p = toupper ( * p ); } p ++ ; } printf ( \"%s \\n \" , arr ); return 0 ; } 11. memcpy \u00b6 void * memcpy ( void * destination , const void * source , size_t num ); \u51fd\u6570memcpy\u4ecesource\u7684\u4f4d\u7f6e\u5f00\u59cb\u5411\u540e\u590d\u5236num\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5230destination\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u8fd9\u4e2a\u51fd\u6570\u5728\u9047\u5230 '\\0' \u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u505c\u4e0b\u6765\u3002 \u5982\u679csource\u548cdestination\u6709\u4efb\u4f55\u7684\u91cd\u53e0\uff0c\u590d\u5236\u7684\u7ed3\u679c\u90fd\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u793a\u4f8b\uff1a #include <stdio.h> #include <string.h> int main () { //int arr[] = { 1,2,3,4,5,6,7,8,9,10 }; //int arr2[10] = { 0 }; //memcpy(arr2, arr, 20); float arr1 [] = { 1.0f , 2.0f , 3.0f , 4.0f }; float arr2 [ 5 ] = { 0.0 }; memcpy ( arr2 , arr1 , 8 ); return 0 ; } \u6a21\u62df\u5b9e\u73b0: void * my_memcpy ( void * dest , void * src , size_t num ) { void * ret = dest ; assert ( dest ); assert ( src ); while ( num -- ) { * ( char * ) dest = * ( char * ) src ; dest = ( char * ) dest + 1 ; src = ( char * ) src + 1 ; } return ret ; } 12. memmove \u00b6 \u548cmemcpy\u7684\u5dee\u522b\u5c31\u662fmemmove\u51fd\u6570\u5904\u7406\u7684\u6e90\u5185\u5b58\u5757\u548c\u76ee\u6807\u5185\u5b58\u5757\u662f\u53ef\u4ee5\u91cd\u53e0\u7684\u3002 \u5982\u679c\u6e90\u7a7a\u95f4\u548c\u76ee\u6807\u7a7a\u95f4\u51fa\u73b0\u91cd\u53e0\uff0c\u5c31\u5f97\u4f7f\u7528memmove\u51fd\u6570\u5904\u7406\u3002 void * my_memmove ( void * dest , void * src , size_t num ) { void * ret = dest ; assert ( dest ); assert ( src ); if ( dest < src ) //1 \u524d->\u540e { while ( num -- ) { * ( char * ) dest = * ( char * ) src ; dest = ( char * ) dest + 1 ; src = ( char * ) src + 1 ; } } else //2 3 \u540e->\u524d { while ( num -- ) { * (( char * ) dest + num ) = * (( char * ) src + num ); } } return ret ; } 13. memcpy \u00b6 int memcmp ( const void * ptr1 , const void * ptr2 , size_t num ); \u793a\u4f8b: #include <stdio.h> #include <string.h> int main () { int arr1 [] = { 1 , 2 , 3 , 0 , 5 }; //01 00 00 00 02 00 00 00 03 00 00 00 00 00 00 00 .. int arr2 [] = { 1 , 2 , 3 , 4 , 0 }; //01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 .. int ret = memcmp ( arr1 , arr2 , 13 ); printf ( \"%d \\n \" , ret ); return 0 ; }","title":"10.\u5b57\u7b26\u4e32\u548c\u5185\u5b58\u51fd\u6570"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#1-strlen","text":"size_t strlen ( const char * str ); * \u5b57\u7b26\u4e32\u5df2\u7ecf '\\0' \u4f5c\u4e3a\u7ed3\u675f\u6807\u5fd7\uff0cstrlen\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5728\u5b57\u7b26\u4e32\u4e2d '\\0' \u524d\u9762\u51fa\u73b0\u7684\u5b57\u7b26\u4e2a\u6570\uff08\u4e0d\u5305\u542b '\\0' )\u3002 #include <stdio.h> #inlcude<string.h> int main () { //a b c \\0 d e f \\0 char arr [] = \"abc \\0 def\" ; return 0 ; } * \u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u8981\u4ee5 '\\0' \u7ed3\u675f\u3002 #include <stdio.h> #include <string.h> int main () { char arr [] = { 'a' , 'b' , 'c' }; printf ( \"%d \\n \" , strlen ( arr )); return 0 ; } * \u6ce8\u610f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3asize_t\uff0c\u662f\u65e0\u7b26\u53f7\u7684( \u6613\u9519 ) #include <stdio.h> #include <string.h> int main () { const char * str1 = \"abcdef\" ; const char * str2 = \"bbb\" ; if ( strlen ( str2 ) - strlen ( str1 ) > 0 ) { printf ( \"str2>str1 \\n \" ); } else { printf ( \"srt1>str2 \\n \" ); } return 0 ; } * \u6a21\u62df\u5b9e\u73b0 //1.\u8ba1\u6570\u5668\u65b9\u5f0f int my_strlen ( const char * str ) { int count = 0 ; while ( * str ) { count ++ ; str ++ ; } return count ; } //2.\u9012\u5f52\uff1a\u4e0d\u80fd\u521b\u5efa\u4e34\u65f6\u53d8\u91cf\u8ba1\u6570\u5668 int my_strlen ( const char * str ) { if ( * str == '\\0' ) return 0 ; else return 1 + my_strlen ( str + 1 ); } //3.\u6307\u9488-\u6307\u9488\u7684\u65b9\u5f0f int my_strlen ( char * s ) { char * p = s ; while ( * p != \u2018\\ 0 \u2019 ) p ++ ; return p - s ; }","title":"1. strlen"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#2-strcpy","text":"char * strcpy ( char * destination , const char * source ); \u6e90\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '\\0' \u7ed3\u675f\u3002 \u5c06\u6e90\u5b57\u7b26\u4e32\u4e2d\u7684 '\\0' \u62f7\u8d1d\u5230\u76ee\u6807\u7a7a\u95f4\u3002 #include <stdio.h> #include <string.h> int main () { char arr [ 10 ] = \"xxxxxxxxx\" ; //const char* p = \"abcdef\"; char arr2 [] = { 'l' , 'k' , '\\0' , 't' }; //strcpy(arr, p); strcpy ( arr , arr2 ); printf ( \"%s \\n \" , arr ); return 0 ; } \u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u8db3\u591f\u5927\uff0c\u4ee5\u786e\u4fdd\u80fd\u5b58\u653e\u6e90\u5b57\u7b26\u4e32\u3002 #include <stdio.h> #include <string.h> int main () { char arr [ 3 ] = { 0 }; char arr2 [] = \"abcdef\" ; strcpy ( arr , arr2 ); printf ( \"%s \\n \" , arr ); return 0 ; } \u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u53ef\u53d8\u3002 #include <stdio.h> #include <string.h> //\u9519\u8bef\u7684\u793a\u8303 int main () { char * p = \"hello world\" ; //\u5e38\u91cf\u5b57\u7b26\u4e32 char arr2 [] = \"abcdef\" ; strcpy ( p , arr2 ); printf ( \"%s \\n \" , p ); return 0 ; } \u6a21\u62df\u5b9e\u73b0 #include <stdio.h> #include <assert.h> //\u9519\u8bef\u7684\u793a\u8303 //1.\u53c2\u6570\u987a\u5e8f //2.\u51fd\u6570\u7684\u529f\u80fd\uff0c\u505c\u6b62\u6761\u4ef6 //3.assert //4.const\u4fee\u9970\u6307\u9488 //5.\u51fd\u6570\u8fd4\u56de\u503c //6.\u9898\u76ee\u51fa\u81ea\u300a\u9ad8\u8d28\u91cfC/C++\u7f16\u7a0b\u300b\u4e66\u7c4d\u6700\u540e\u7684\u8bd5\u9898\u90e8\u5206 char * my_strcpy ( char * dest , const char * src ) { char * ret = dest ; assert ( dest != NULL ); assert ( src != NULL ); while (( * dest ++ = * src ++ )) { ; } return ret ; }","title":"2. strcpy"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#3-strcat","text":"char * strcat ( char * destination , const char * source ); \u6e90\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '\\0' \u7ed3\u675f\u3002 \u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u6709\u8db3\u591f\u7684\u5927\uff0c\u80fd\u5bb9\u7eb3\u4e0b\u6e90\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002 \u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u53ef\u4fee\u6539\u3002 \u5b57\u7b26\u4e32\u81ea\u5df1\u7ed9\u81ea\u5df1\u8ffd\u52a0\uff0c\u5982\u4f55\uff1f(\u540e\u7eed\u8bb2) #include <stdio.h> #include <assert.h> int main () { char arr1 [ 20 ] = \"lkt\" ; strcat ( arr1 , arr1 ); //char arr1[20] = \"hello \"; //char arr2[] = \"world\"; //printf(\"%s\\n\", strcat(arr1, arr2)); return 0 ; } \u6a21\u62df\u5b9e\u73b0 char * my_strcat ( char * dest , const char * src ) { //1.\u627e\u76ee\u6807\u7a7a\u95f4\u4e2d\u7684\\0 char * cur = dest ; while ( * cur ) { cur ++ ; } //2.\u62f7\u8d1d\u6e90\u5934\u6570\u636e\u5230\\0\u4e4b\u540e\u7684\u7a7a\u95f4 while ( * cur ++ = * src ++ ) { ; } return dest ; }","title":"3. strcat"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#4-strcmp","text":"int strcmp ( const char * str1 , const char * str2 ); \u6807\u51c6\u89c4\u5b9a\uff1a \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5927\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5927\u4e8e0\u7684\u6570\u5b57 \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de0 \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5c0f\u4e8e0\u7684\u6570\u5b57 \u90a3\u4e48\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\uff1f int main () { /*char arr1[] = \"abcdef\"; char arr2[] = \"abq\";*/ //char arr1[] = \"abcd\"; //char arr2[] = \"abc\"; char arr1 [] = \"abc\" ; char arr2 [] = \"abc\" ; //char arr1[] = { 'a', 'b', 'c' }; //char arr2[] = { 'a', 'b', 'c' }; int ret = my_strcmp ( arr1 , arr2 ); if ( ret < 0 ) printf ( \"arr1<arr2 \\n \" ); else if ( ret > 0 ) printf ( \"arr1>arr2 \\n \" ); else printf ( \"arr1==arr2 \\n \" ); printf ( \"%d \\n \" , ret ); return 0 ; } \u6a21\u62df\u5b9e\u73b0 int my_strcmp ( const char * s1 , const char * s2 ) { assert ( s1 && s2 ); while ( * s1 == * s2 ) { if ( * s1 == '\\0' ) { return 0 ; } s1 ++ ; s2 ++ ; } //return *s1 - *s2; if ( * s1 > * s2 ) return 1 ; else return -1 ; }","title":"4. strcmp"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#5-strncpy","text":"int strncmp ( const char * str1 , const char * str2 , size_t num ); * \u62f7\u8d1dnum\u4e2a\u5b57\u7b26\u4ece\u6e90\u5b57\u7b26\u4e32\u5230\u76ee\u6807\u7a7a\u95f4 * \u5982\u679c\u6e90\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8enum\uff0c\u5219\u62f7\u8d1d\u5b8c\u6e90\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u5728\u76ee\u6807\u7684\u540e\u8fb9\u8ffd\u52a00\uff0c\u76f4\u5230num\u4e2a\u3002 int main () { char arr1 [ 20 ] = \"abcdefghi\" ; char arr2 [] = \"xxxx\" ; strncpy ( arr1 , arr2 , 8 ); printf ( \"%s \\n \" , arr1 ); return 0 ; }","title":"5. strncpy"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#6-strncat","text":"char * strncat ( char * destination , const char * source , size_t num ); #include <stdio.h> #include <assert.h> int main () { char arr1 [ 20 ] = \"abcdef \\0 qqqqqq\" ; char arr2 [] = \"xyz\" ; strncat ( arr1 , arr2 , 2 ); printf ( \"%s \\n \" , arr1 ); return 0 ; } \u81ea\u5df1\u7ed9\u81ea\u5df1\u6dfb\u52a0 #include <stdio.h> #include <assert.h> int main () { char arr1 [ 20 ] = \"abc\" ; strncat ( arr1 , arr1 , 3 ); printf ( \"%s \\n \" , arr1 ); return 0 ; }","title":"6. strncat"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#7-strncmp","text":"#include <stdio.h> #include <assert.h> int main () { int ret = strncmp ( \"abcdef\" , \"abc\" , 4 ); printf ( \"%d \\n \" , ret ); return 0 ; }","title":"7. strncmp"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#8-strstr-kmp","text":"\u793a\u4f8b #include <stdio.h> #include <assert.h> int main () { char arr1 [] = \"abcdefabcdef\" ; char arr2 [] = \"cdq\" ; char * p = strstr ( arr1 , arr2 ); if ( p == NULL ) { printf ( \"\u4e0d\u5b58\u5728 \\n \" ); } else { printf ( \"%s \\n \" , p ); } return 0 ; } \u6a21\u62df\u5b9e\u73b0(\u66b4\u529b\u7248\u672c) #include <stdio.h> #include <assert.h> char * my_strstr ( const char * str1 , const char * str2 ) { const char * s1 = str1 ; const char * s2 = str2 ; const char * p = str1 ; if ( * str2 == '\\0' ) { return str1 ; } while ( * p ) { s1 = p ; s2 = str2 ; while ( * s1 != '\\0' && * s2 != '\\0' && ( * s1 == * s2 )) { s1 ++ ; s2 ++ ; } if ( * s2 == '\\0' ) { return ( char * ) p ; //\u627e\u5230\u4e86 } p ++ ; } return NULL ; //\u627e\u4e0d\u5230\u5b50\u4e32 } \u6a21\u62df\u5b9e\u73b0(KMP\u7248\u672c) KMP\u6709\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e3b\u4e32\u548c\u5b50\u4e32 \u4e3b\u4e32\u7684\u6307\u9488\u4e0d\u56de\u5934\uff0c\u6307\u9488\u672a\u4e3ai \u5b50\u4e32\u7684\u6307\u9488\u56de\u5934\uff0c\u4f46\u662f\u4e0d\u662f\u4e00\u5b9a\u56de\u5230\u4e0b\u6807\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e2anext\u7684\u6570\u7ec4,\u6307\u9488\u4e3aj KMP for ( int i = 1 , j = 0 ; i <= m ; ++ i ) { while ( j && s [ i ] != p [ j + 1 ]) j = Next [ j ]; if ( s [ i ] == p [ j + 1 ]) j ++ ; if ( j >= n ) { cout << i - n << \" \" ; } } Next\u6570\u7ec4(\u9012\u63a8) 1.next[1]=0 2.\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4efb\u7136\u76f8\u540c\u7684\u8bdd\uff0c\u76f4\u63a5\u6784\u6210\u4e86\u4e00\u4e2a\u66f4\u957f\u7684\u524d\u540e\u7f00 3.\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\u7684\u8bdd\uff0c\u76f4\u63a5\u53bb\u5de6\u8fb9\u7684\u7f00\u53bb\u5bfb\u627e\u5171\u540c\u7684\u524d\u540e\u7f00 4.\u56de\u5230\u4e4b\u524d\u7684\u6b65\u9aa4 for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j && p [ i ] != p [ j + 1 ]) j = Next [ j ]; if ( p [ i ] == p [ j + 1 ]) j ++ ; Next [ i ] = j ; } \u6c47\u603b\uff1a #include <iostream> using namespace std ; const int N = 1e6 + 5 ; char s [ N ], p [ N ]; //s\u662f\u4e3b\u4e32\uff0cp\u662f\u5b50\u4e32 int Next [ N ]; int main () { int n , m ; cin >> n >> p + 1 >> m >> s + 1 ; //Next for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j && p [ i ] != p [ j + 1 ]) j = Next [ j ]; if ( p [ i ] == p [ j + 1 ]) j ++ ; Next [ i ] = j ; } int flag = false ; //kmp for ( int i = 1 , j = 0 ; i <= m ; ++ i ) { while ( j && s [ i ] != p [ j + 1 ]) j = Next [ j ]; if ( s [ i ] == p [ j + 1 ]) j ++ ; if ( j >= n ) { flag = true ; cout << i - n << \" \" ; j = Next [ j ]; } } if ( ! flag ) { cout << -1 << endl ; } return 0 ; }","title":"8. strstr + KMP"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#9-strtok","text":"char * strtok ( char * str, const char * sep ); * sep\u53c2\u6570\u662f\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b9a\u4e49\u4e86\u7528\u4f5c\u5206\u9694\u7b26\u7684\u5b57\u7b26\u96c6\u5408 * \u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u5305\u542b\u4e860\u4e2a\u6216\u8005\u591a\u4e2a\u7531sep\u5b57\u7b26\u4e32\u4e2d\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5206\u9694\u7b26\u5206\u5272\u7684\u6807\u8bb0\u3002 * strtok\u51fd\u6570\u627e\u5230str\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6807\u8bb0\uff0c\u5e76\u5c06\u5176\u7528 \\0 \u7ed3\u5c3e\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u6807\u8bb0\u7684\u6307\u9488\u3002\uff08\u6ce8\uff1astrtok\u51fd\u6570\u4f1a\u6539\u53d8\u88ab\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u5728\u4f7f\u7528strtok\u51fd\u6570\u5207\u5206\u7684\u5b57\u7b26\u4e32\u4e00\u822c\u90fd\u662f\u4e34\u65f6\u62f7\u8d1d\u7684\u5185\u5bb9\u5e76\u4e14\u53ef\u4fee\u6539\u3002\uff09 * strtok\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u4e3a NULL \uff0c\u51fd\u6570\u5c06\u627e\u5230str\u4e2d\u7b2c\u4e00\u4e2a\u6807\u8bb0\uff0cstrtok\u51fd\u6570\u5c06\u4fdd\u5b58\u5b83\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\u3002 * strtok\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a NULL \uff0c\u51fd\u6570\u5c06\u5728\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u88ab\u4fdd\u5b58\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u4e0b\u4e00\u4e2a\u6807\u8bb0\u3002 * \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u66f4\u591a\u7684\u6807\u8bb0\uff0c\u5219\u8fd4\u56de NULL \u6307\u9488\u3002 #include <stdio.h> #include <string.h> int main () { char arr [] = \"liuketing@swpuedu.com\" ; char buf [ 200 ] = { 0 }; strcpy ( buf , arr ); const char * p = \"@.\" ; char * str = NULL ; for ( str = strtok ( buf , p ); str != NULL ; str = strtok ( NULL , p )) { printf ( \"%s \\n \" , str ); } return 0 ; }","title":"9. strtok"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#10-strerror","text":"char * strerror ( int errnum ); #include <stdio.h> #include <string.h> //strerror //\u628a\u9519\u8bef\u7801\u8f6c\u6362\u6210\u9519\u8bef\u4fe1\u606f int main () { //printf(\"%s\\n\", strerror(0)); //printf(\"%s\\n\", strerror(1)); //printf(\"%s\\n\", strerror(2)); //printf(\"%s\\n\", strerror(3)); //printf(\"%s\\n\", strerror(4)); //\u9519\u8bef\u7801\u8bb0\u5f55\u5230\u9519\u8bef\u7801\u7684\u53d8\u91cf\u4e2d //errno - C\u8bed\u8a00\u63d0\u4f9b\u7684\u5168\u5c40\u7684\u9519\u8bef\u53d8\u91cf //#include <errno.h> FILE * pf = fopen ( \"test.txt\" , \"r\" ); if ( pf == NULL ) { //perror(\"\");//\u6253\u5370\u7684\u4f9d\u7136\u662ferrno\u53d8\u91cf\u4e2d\u9519\u8bef\u7801\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f printf ( \"%s \\n \" , strerror ( errno )); return 1 ; } //\u8bfb\u6587\u4ef6 fclose ( pf ); pf = NULL ; return 0 ; } \u5b57\u7b26\u4e32\u5206\u7c7b\u51fd\u6570: \u51fd\u6570 \u5982\u679c\u4ed6\u7684\u53c2\u6570\u7b26\u5408\u4e0b\u5217\u6761\u4ef6\u5c31\u8fd4\u56de\u771f iscntrl \u4efb\u4f55\u63a7\u5236\u5b57\u7b26 isspace \u7a7a\u767d\u5b57\u7b26\uff1a\u7a7a\u683c\u2018 \u2019\uff0c\u6362\u9875\u2018\\f\u2019\uff0c\u6362\u884c'\\n'\uff0c\u56de\u8f66\u2018\\r\u2019\uff0c\u5236\u8868\u7b26'\\t'\u6216\u8005\u5782\u76f4\u5236\u8868\u7b26'\\v' isdigit \u5341\u8fdb\u5236\u6570\u5b57 0~9 isxdigit \u5341\u516d\u8fdb\u5236\u6570\u5b57\uff0c\u5305\u62ec\u6240\u6709\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u5c0f\u5199\u5b57\u6bcda f\uff0c\u5927\u5199\u5b57\u6bcdA F islower \u5c0f\u5199\u5b57\u6bcda~z isupper \u5927\u5199\u5b57\u6bcdA~Z isalpha \u5b57\u6bcda z\u6216A Z isalnum \u5b57\u6bcd\u6216\u8005\u6570\u5b57\uff0ca z,A Z,0~9 ispunct \u6807\u70b9\u7b26\u53f7\uff0c\u4efb\u4f55\u4e0d\u5c5e\u4e8e\u6570\u5b57\u6216\u8005\u5b57\u6bcd\u7684\u56fe\u5f62\u5b57\u7b26\uff08\u53ef\u6253\u5370\uff09 isgraph \u4efb\u4f55\u56fe\u5f62\u5b57\u7b26 isprint \u4efb\u4f55\u53ef\u6253\u5370\u5b57\u7b26\uff0c\u5305\u62ec\u56fe\u5f62\u5b57\u7b26\u548c\u7a7a\u767d\u5b57\u7b26 \u5b57\u7b26\u8f6c\u6362: \u51fd\u6570 \u529f\u80fd toupper \u5c0f\u5199\u8f6c\u5927\u5199 tolower \u5927\u5199\u8f6c\u5c0f\u5199 #include <stdio.h> #include <ctype.h> int main () { char arr [] = \"Are you ok?\" ; char * p = arr ; while ( * p ) { if ( islower ( * p )) { * p = toupper ( * p ); } p ++ ; } printf ( \"%s \\n \" , arr ); return 0 ; }","title":"10. strerror"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#11-memcpy","text":"void * memcpy ( void * destination , const void * source , size_t num ); \u51fd\u6570memcpy\u4ecesource\u7684\u4f4d\u7f6e\u5f00\u59cb\u5411\u540e\u590d\u5236num\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5230destination\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u8fd9\u4e2a\u51fd\u6570\u5728\u9047\u5230 '\\0' \u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u505c\u4e0b\u6765\u3002 \u5982\u679csource\u548cdestination\u6709\u4efb\u4f55\u7684\u91cd\u53e0\uff0c\u590d\u5236\u7684\u7ed3\u679c\u90fd\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u793a\u4f8b\uff1a #include <stdio.h> #include <string.h> int main () { //int arr[] = { 1,2,3,4,5,6,7,8,9,10 }; //int arr2[10] = { 0 }; //memcpy(arr2, arr, 20); float arr1 [] = { 1.0f , 2.0f , 3.0f , 4.0f }; float arr2 [ 5 ] = { 0.0 }; memcpy ( arr2 , arr1 , 8 ); return 0 ; } \u6a21\u62df\u5b9e\u73b0: void * my_memcpy ( void * dest , void * src , size_t num ) { void * ret = dest ; assert ( dest ); assert ( src ); while ( num -- ) { * ( char * ) dest = * ( char * ) src ; dest = ( char * ) dest + 1 ; src = ( char * ) src + 1 ; } return ret ; }","title":"11. memcpy"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#12-memmove","text":"\u548cmemcpy\u7684\u5dee\u522b\u5c31\u662fmemmove\u51fd\u6570\u5904\u7406\u7684\u6e90\u5185\u5b58\u5757\u548c\u76ee\u6807\u5185\u5b58\u5757\u662f\u53ef\u4ee5\u91cd\u53e0\u7684\u3002 \u5982\u679c\u6e90\u7a7a\u95f4\u548c\u76ee\u6807\u7a7a\u95f4\u51fa\u73b0\u91cd\u53e0\uff0c\u5c31\u5f97\u4f7f\u7528memmove\u51fd\u6570\u5904\u7406\u3002 void * my_memmove ( void * dest , void * src , size_t num ) { void * ret = dest ; assert ( dest ); assert ( src ); if ( dest < src ) //1 \u524d->\u540e { while ( num -- ) { * ( char * ) dest = * ( char * ) src ; dest = ( char * ) dest + 1 ; src = ( char * ) src + 1 ; } } else //2 3 \u540e->\u524d { while ( num -- ) { * (( char * ) dest + num ) = * (( char * ) src + num ); } } return ret ; }","title":"12. memmove"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#13-memcpy","text":"int memcmp ( const void * ptr1 , const void * ptr2 , size_t num ); \u793a\u4f8b: #include <stdio.h> #include <string.h> int main () { int arr1 [] = { 1 , 2 , 3 , 0 , 5 }; //01 00 00 00 02 00 00 00 03 00 00 00 00 00 00 00 .. int arr2 [] = { 1 , 2 , 3 , 4 , 0 }; //01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 .. int ret = memcmp ( arr1 , arr2 , 13 ); printf ( \"%d \\n \" , ret ); return 0 ; }","title":"13. memcpy"},{"location":"C%E8%AF%AD%E8%A8%80/11.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%28%E7%BB%93%E6%9E%84%E4%BD%93%2B%E6%9E%9A%E4%B8%BE%2B%E8%81%94%E5%90%88%29/","text":"","title":"11.\u81ea\u5b9a\u4e49\u51fd\u6570(\u7ed3\u6784\u4f53+\u679a\u4e3e+\u8054\u5408)"},{"location":"C%E8%AF%AD%E8%A8%80/12.%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/","text":"","title":"12.\u52a8\u6001\u5185\u5b58\u7ba1\u7406"},{"location":"C%E8%AF%AD%E8%A8%80/13.%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%28%E9%A2%84%E5%A4%84%E7%90%86%2B%E9%93%BE%E6%8E%A5%29/","text":"","title":"13.\u7a0b\u5e8f\u7684\u7f16\u8bd1(\u9884\u5904\u7406+\u94fe\u63a5)"},{"location":"C%E8%AF%AD%E8%A8%80/14.%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/","text":"","title":"14.\u6587\u4ef6\u64cd\u4f5c"},{"location":"C%E8%AF%AD%E8%A8%80/2.%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/","text":"","title":"2.\u5206\u652f\u548c\u5faa\u73af\u8bed\u53e5"},{"location":"C%E8%AF%AD%E8%A8%80/3.%E5%87%BD%E6%95%B0/","text":"","title":"3.\u51fd\u6570"},{"location":"C%E8%AF%AD%E8%A8%80/4.%E6%95%B0%E7%BB%84/","text":"","title":"4.\u6570\u7ec4"},{"location":"C%E8%AF%AD%E8%A8%80/5.%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A3/","text":"","title":"5.\u64cd\u4f5c\u7b26\u8be6\u89e3"},{"location":"C%E8%AF%AD%E8%A8%80/6.%E7%BB%93%E6%9E%84%E4%BD%93/","text":"","title":"6.\u7ed3\u6784\u4f53"},{"location":"C%E8%AF%AD%E8%A8%80/7.%E5%AE%9E%E7%94%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/","text":"","title":"7.\u5b9e\u7528\u8c03\u8bd5\u6280\u5de7"},{"location":"C%E8%AF%AD%E8%A8%80/8.%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/","text":"","title":"8.\u6570\u636e\u7684\u5b58\u50a8"},{"location":"C%E8%AF%AD%E8%A8%80/9.%E6%8C%87%E9%92%88%E7%9A%84%E8%BF%9B%E9%98%B6/","text":"","title":"9.\u6307\u9488\u7684\u8fdb\u9636"},{"location":"%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F/","text":"\u6d4b\u8bd5\u9898\u76ee \u00b6 \u6211\u5728\u6d4b\u8bd5 \u00b6","title":"\u6d4b\u8bd5\u7a0b\u5e8f"},{"location":"%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F/#_1","text":"","title":"\u6d4b\u8bd5\u9898\u76ee"},{"location":"%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F/#_2","text":"","title":"\u6211\u5728\u6d4b\u8bd5"},{"location":"%E7%AE%97%E6%B3%952/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/","text":"\u4e8c\u5206\u7b97\u6cd5 \u00b6 \u6d4b\u8bd5\u4e8c\u5206\u7b97\u6cd5 \u00b6","title":"\u4e8c\u5206\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%952/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#_1","text":"","title":"\u4e8c\u5206\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%952/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/#_2","text":"","title":"\u6d4b\u8bd5\u4e8c\u5206\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%952/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","text":"\u52a8\u6001\u89c4\u5212 \u00b6 \u6d4b\u8bd5\u54e6 \u00b6 \u54c8\u54c8\u54c8\u54c8","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%952/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_1","text":"","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%952/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_2","text":"\u54c8\u54c8\u54c8\u54c8","title":"\u6d4b\u8bd5\u54e6"}]}